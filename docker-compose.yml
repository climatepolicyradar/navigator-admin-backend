services:
  admin_backend_db:
    image: postgres:14
    restart: always
    env_file:
      - .env
    ports:
      - 5432:5432
    volumes:
      - admin-data:/var/lib/postgresql/data:cached
    healthcheck:
      test: [CMD-SHELL, "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 30

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:s3-latest
    env_file:
      - .env
    ports:
      - 127.0.0.1:4566:4566 # LocalStack Gateway
    environment:
      - DEBUG=${DEBUG:-0}
    volumes:
      - ./tests/integration_tests/init-s3.py:/etc/localstack/init/ready.d/init-s3.py

  navigator-admin-backend:
    build:
      context: ./
      dockerfile: Dockerfile
    image: navigator-admin-backend
    tty: true
    env_file:
      - .env
    volumes:
      - ./:/cpr-admin-backend/:cached
    ports:
      - 8888:8888
    environment:
      PYTHONPATH: .
    depends_on:
      admin_backend_db:
        condition: service_healthy
      localstack:
        condition: service_started

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    env_file:
      - .env
    ports:
      - 8000:80
    # This has to have world & group access denied to work
    entrypoint: /bin/sh -c "chmod 600 /pgpass; /entrypoint.sh;"
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: pgpass
        target: /pgpass
    environment:
      # This deavctivates the login screen
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    # This is just nice to know as if it fails, it fails quietly
    healthcheck:
      # there are conflicting trunk errors here. Either
      # - having `:` in the URL (fails in Github actions)
      # - redundantly quoting the URL (fails locally)
      # trunk-ignore(yamllint/quoted-strings)
      test: [CMD, wget, -O, "-", "http://localhost:80/misc/ping"]
configs:
  pgpass:
    content: "admin_backend_db:5432:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}"
  servers.json:
    content: |
      {
        "Servers": {
          "1": {
            "Group": "Servers",
            "Name": "Navigator Admin Backend",
            "Host": "admin_backend_db",
            "Port": 5432,
            "MaintenanceDB": "postgres",
            "Username": "${POSTGRES_USER}",
            "Password": "${POSTGRES_PASSWORD}",
            "SSLMode": "prefer"
          }
        }
      }
      localstack:
        condition: service_started

volumes:
  admin-data: {}
  pgadmin-data: {}
